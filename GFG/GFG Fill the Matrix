Given a matrix with dimensions N x M, entirely filled with zeroes except for one position at co-ordinates X and Y containing '1'. 
Find the minimum number of iterations in which the whole matrix can be filled with ones.
Note: In one iteration, '1' can be filled in the 4 neighbouring elements of a cell containing '1'.

bool isSafe(int i,int j,vector<vector<int>>&mat){
     int n=mat.size();
     int m=mat[0].size();
     if(i>=0 && i<n && j>=0 && j<m && mat[i][j]==0)
     return true;
     return false;
 }

    int minIteration(int N, int M, int x, int y){    
        // code here
        vector<vector<int>>mat(N,vector<int>(M,0));
        mat[x-1][y-1]=1;
        if(N==1 && M==1)
        return 0;
        int count=0;
        queue<pair<int,int>>q;
        q.push({x-1,y-1});
        while(!q.empty()){
            // if(check(mat)){
            //     return count;
            // }
            int size=q.size();
            for(int i=0;i<size;i++){
                pair<int,int>p=q.front();
                q.pop();
                int x=p.first;
                int y=p.second;
                if(isSafe(x+1,y,mat)){
                    q.push({x+1,y});
                    mat[x+1][y]=1;
                }
                if(isSafe(x-1,y,mat)){
                    q.push({x-1,y});
                    mat[x-1][y]=1;
                }
                if(isSafe(x,y+1,mat)){
                    q.push({x,y+1});
                    mat[x][y+1]=1;
                }
                if(isSafe(x,y-1,mat)){
                    q.push({x,y-1});
                    mat[x][y-1]=1;
                }
            }
            if(!q.empty())
            count++;
        }
        return count;
    }
};
